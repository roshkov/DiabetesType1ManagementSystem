@App:name('hyperglycemia')
@App:description('hyperglycemia')


--- Streams ---

-- Receive CGM Device Information
@source(type='inMemory', topic="cgmDeviceTopic", @map(type="passThrough"))
define stream cgmDeviceStream (
  patient string,
  glucose double,
  type string,
  comments string
);
--

@source(type="inMemory", topic="trendTopic", @map(type="passThrough"))
define stream trendStream (
  patient string,
  trend string,
  avgGlucose double,
  startEndGlucoseChange double,
  currentGlucoseLevel double
);

-- Send into external patient sink
@sink(type='log')
@sink(type='inMemory', topic="externalPatientTopic", @map(type="passThrough"))
define stream externalPatientSinkStream(patientId string, description string, processInstanceId string);

-- Send into external doctor sink
@sink(type='inMemory', topic="externalDoctorTopic", @map(type="passThrough"))
define stream externalDoctorSinkStream(patientId string, description string, processInstanceId string);

@sink(type='log')
@sink(type="inMemory", topic="messageNoProcessTopic", @map(type="passThrough"))
define stream messageNoProcessStream(glucose double, message string, patient string);

@sink(type="inMemory", topic="messageWithProcessTopic", @map(type="passThrough"))
define stream messageWithProcessStream(message string, processInstanceId string);

-- Receive Camunda Messages
@source(type='inMemory', topic="camundaInputTopic", @map(type="passThrough"))
define stream CamundaInputStream(patientId string, description string, processInstanceId string);
--

@sink(type="log")
@source(type="inMemory", topic="externalTopic", @map(type="passThrough"))
define stream externalStream (
  patientId string,
  description string,
  value string,
  processInstanceId string
);

@sink(type='log')
@sink(type="inMemory", topic="updateGlucoseMessageTopic", @map(type="passThrough"))
define stream updateGlucoseMessageStream(message string, processInstanceId string, glucose double);

---  Logic  ---

-- Sends a message after identification of Hyperglycemia.
from every e1=trendStream[(currentGlucoseLevel > 8.0 and trend == 'rising') or avgGlucose >= 9.0]
select ifThenElse(e1.currentGlucoseLevel >= 8.0 and e1.trend == 'rising', e1.currentGlucoseLevel, e1.avgGlucose) as glucose,
--select ifThenElse(e1.currentGlucoseLevel >= 8.0 and e1.trend == 'rising', e1.currentGlucoseLevel + 5.0, e1.avgGlucose + 5.0) as glucose,
      "Message_Hyperglycemia" as message, 
      e1.patient as patient
insert into messageNoProcessStream;
--

-- Forward messages from Camunda to API (patient)
from CamundaInputStream[description == 'Notify patient about high blood sugar']
select patientId, description, processInstanceId
insert into externalPatientSinkStream;

-- Forward messages from Camunda to API (patient)
from CamundaInputStream[description == 'Notify patient to take insulin']
select patientId, description, processInstanceId
insert into externalPatientSinkStream;

-- Forward response from API to Camunda

from externalStream[description == 'Message_Receive_Blood_Sugar_Measurement']
select 'Message_Receive_Blood_Sugar_Measurement' as message, processInstanceId, convert(value, "double") as glucose
insert into updateGlucoseMessageStream;
--insert into updateGlucoseMessageMemory;

-- Send to forwarding stream if patient information is being forwarded
-- forwarding for "Fast Insulin Injected"
from cgmDeviceStream as c join externalStream[description == "Fast Insulin Injected"]#window.unique:time(patientId, 5 sec) as p
  on c.patient == p.patientId
select "Message_Receive_Glucose_Level" as message, p.processInstanceId, c.glucose
insert into updateGlucoseMessageStream;
--

/*
from every p=externalStream[description == "Fast Insulin Injected"] -> c=cgmDeviceStream[p.patientId == patient]
  within 5 sec
select "Message_Receive_Glucose_Level" as message, p.processInstanceId, c.glucose
insert into updateGlucoseMessageStream;*/

-- Forward messages from Camunda to API (doctor)
from CamundaInputStream[description == 'Notify Doctor about hyperglycemia']
select patientId, description, processInstanceId
insert into externalDoctorSinkStream;